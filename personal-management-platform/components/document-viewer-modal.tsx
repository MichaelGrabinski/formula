"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import type { Document } from "@/lib/data-store"
import { FileText, Download, Calendar, Tag, Building, ZoomIn, ZoomOut } from "lucide-react"

interface DocumentViewerModalProps {
  document: Document | null
  open: boolean
  onOpenChange: (open: boolean) => void
}

export function DocumentViewerModal({ document, open, onOpenChange }: DocumentViewerModalProps) {
  const [zoom, setZoom] = useState(100)

  if (!document) return null

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes"
    const k = 1024
    const sizes = ["Bytes", "KB", "MB", "GB"]
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
  }

  const generateSamplePDF = (document: Document) => {
    // Create a simple PDF-like content for demonstration
    const pdfContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${document.name}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              padding: 40px; 
              background: white;
              margin: 0;
            }
            .header { 
              text-align: center; 
              border-bottom: 2px solid #333; 
              padding-bottom: 20px; 
              margin-bottom: 30px; 
            }
            .content { 
              line-height: 1.6; 
              font-size: 14px; 
            }
            .footer { 
              margin-top: 50px; 
              text-align: center; 
              font-size: 12px; 
              color: #666; 
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${document.name}</h1>
            <p>Category: ${document.category} | Property: ${document.property}</p>
            <p>Upload Date: ${new Date(document.uploadDate).toLocaleDateString()}</p>
          </div>
          <div class="content">
            <h2>Document Details</h2>
            <p><strong>File Type:</strong> ${document.type}</p>
            <p><strong>Size:</strong> ${document.size}</p>
            <p><strong>Tags:</strong> ${document.tags?.join(", ") || "None"}</p>
            
            <h2>Content</h2>
            <p>${document.fileContent || "This is a sample document content for demonstration purposes. In a real application, this would contain the actual document content."}</p>
            
            <h2>Additional Information</h2>
            <p>This document is part of your property management system and contains important information related to ${document.property}.</p>
            
            <p>For more details about this document or to make changes, please contact your property management team.</p>
          </div>
          <div class="footer">
            <p>Generated by Property Management Platform</p>
            <p>Document ID: ${document.id}</p>
          </div>
        </body>
      </html>
    `

    const blob = new Blob([pdfContent], { type: "text/html" })
    return URL.createObjectURL(blob)
  }

  const handleZoomIn = () => {
    setZoom((prev) => Math.min(prev + 25, 200))
  }

  const handleZoomOut = () => {
    setZoom((prev) => Math.max(prev - 25, 50))
  }

  const setZoomLevel = (level: number) => {
    setZoom(level)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-6xl max-h-[90vh] overflow-hidden">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <DialogTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              {document.name}
            </DialogTitle>
            <div className="flex items-center gap-2">
              <Button size="sm" variant="outline" onClick={handleZoomOut}>
                <ZoomOut className="h-4 w-4" />
              </Button>
              <span className="text-sm font-medium min-w-[60px] text-center">{zoom}%</span>
              <Button size="sm" variant="outline" onClick={handleZoomIn}>
                <ZoomIn className="h-4 w-4" />
              </Button>
              <Button size="sm" variant="outline">
                <Download className="h-4 w-4 mr-1" />
                Download
              </Button>
            </div>
          </div>
        </DialogHeader>

        <div className="grid grid-cols-4 gap-6 h-[calc(90vh-120px)]">
          {/* Document Preview */}
          <div className="col-span-3 border rounded-lg overflow-hidden bg-gray-50">
            {document.type === "PDF" || document.type === "application/pdf" ? (
              <iframe
                src={generateSamplePDF(document)}
                className="w-full h-full border-0"
                style={{ transform: `scale(${zoom / 100})`, transformOrigin: "top left" }}
                title={`Preview of ${document.name}`}
              />
            ) : (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <FileText className="h-16 w-16 mx-auto mb-4 text-gray-400" />
                  <p className="text-gray-600">Preview not available for this file type</p>
                  <p className="text-sm text-gray-500 mt-2">File type: {document.type}</p>
                </div>
              </div>
            )}
          </div>

          {/* Document Details Sidebar */}
          <div className="space-y-6 overflow-y-auto">
            {/* Basic Info */}
            <div>
              <h3 className="font-semibold mb-3">Document Information</h3>
              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <FileText className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm">
                    {formatFileSize(typeof document.size === "string" ? 0 : document.size)}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm">{new Date(document.uploadDate).toLocaleDateString()}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Building className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm">{document.property}</span>
                </div>
              </div>
            </div>

            {/* Category */}
            <div>
              <h3 className="font-semibold mb-2">Category</h3>
              <Badge variant="secondary">{document.category}</Badge>
            </div>

            {/* Tags */}
            {document.tags && document.tags.length > 0 && (
              <div>
                <h3 className="font-semibold mb-2">Tags</h3>
                <div className="flex flex-wrap gap-1">
                  {document.tags.map((tag, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      <Tag className="h-3 w-3 mr-1" />
                      {tag}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {/* Zoom Controls */}
            <div>
              <h3 className="font-semibold mb-2">Zoom</h3>
              <div className="space-y-2">
                {[75, 100, 125].map((level) => (
                  <Button
                    key={level}
                    size="sm"
                    variant={zoom === level ? "default" : "outline"}
                    className="w-full"
                    onClick={() => setZoomLevel(level)}
                  >
                    {level}%
                  </Button>
                ))}
              </div>
            </div>

            {/* Description */}
            {document.description && (
              <div>
                <h3 className="font-semibold mb-2">Description</h3>
                <p className="text-sm text-muted-foreground">{document.description}</p>
              </div>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}
